{
  "_from": "express-handlebars-sections",
  "_id": "express-handlebars-sections@1.0.1",
  "_inBundle": false,
  "_integrity": "sha1-L/S6GvgvPq11VwruwrHMxlDyPCE=",
  "_location": "/express-handlebars-sections",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "express-handlebars-sections",
    "fetchSpec": "latest",
    "name": "express-handlebars-sections",
    "raw": "express-handlebars-sections",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-handlebars-sections/-/express-handlebars-sections-1.0.1.tgz",
  "_shasum": "2ff4ba1af82f3ead75570aeec2b1ccc650f23c21",
  "_shrinkwrap": null,
  "_spec": "express-handlebars-sections",
  "_where": "/none/Learn/hk2/web/Project/1512197_1312528",
  "author": {
    "name": "cyberxander90"
  },
  "bugs": {
    "url": "https://github.com/cyberxander90/express-handlebars-sections/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Include Handlebar Helper to manage sections in layouts.",
  "devDependencies": {},
  "homepage": "https://github.com/cyberxander90/express-handlebars-sections",
  "keywords": [
    "express",
    "express-handlebars",
    "handlebar",
    "layouts",
    "sections"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "express-handlebars-sections",
  "optionalDependencies": {},
  "readme": "# express-handlebars-sections\r\n\r\nThis module add support to express-handlebars to manage sections. It means that you can define one or more sections in the template, and then in the view specify what is the content for each section.\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install express-handlebars-sections\r\n```\r\n\r\n## Usage\r\n#### 1- Configure the express handlebars.\r\nIf you register the Handlebars view engine directly use this:\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar express_handlebars  = require('express-handlebars');\r\nvar express_handlebars_sections = require('express-handlebars-sections');\r\n\r\nvar app = express();\r\n\r\napp.engine('handlebars', express_handlebars({\r\n\tsection: express_handlebars_sections()  // CONFIGURE 'express_handlebars_sections'\r\n\r\n\t// properties used by express-handlebars configuration ...\r\n}));\r\n```\r\nor if you prefer register Handlebars view engine with a Handlebars instance use this:\r\n```javascript\r\nvar express = require('express');\r\nvar express_handlebars  = require('express-handlebars');\r\nvar express_handlebars_sections = require('express-handlebars-sections');\r\n\r\nvar app = express();\r\n\r\nvar hbs = express_handlebars.create({\r\n\t// properties used by express-handlebars configuration ...\r\n});\r\nexpress_handlebars_sections(hbs);   // CONFIGURE 'express_handlebars_sections'\r\n\r\napp.engine('handlebars', handlebars.engine);\r\n```\r\n\r\n#### 2- Define your sections in the layout\r\nHere we going to define two sections, one for the header and other for the footer of my page.\r\n```html\r\n<head>\r\n    <title>Hello express-handlebars-sections</title>\r\n</head>\r\n<body>\r\n    <!-- DEFINE A 'header' SECTION -->\r\n    {{{_sections.header}}}\r\n\r\n    {{{body}}\r\n\r\n    <!-- DEFINE A 'footer' SECTION -->\r\n    {{{_sections.footer}}}\r\n</body>\r\n</html>\r\n```\r\n\r\n#### 3- Define the content for your sections in the view\r\nThen in a view that will use the previous layout we can define what is the content that we want to render of each section.\r\n\r\n```html\r\n<p>This is my Body Content</p>\r\n\r\n{{#section 'header'}}\r\n    <h1>This is my Header Content</h1>\r\n{{/section}}\r\n\r\n{{#section 'footer'}}\r\n    <h1>This is my Footer Content</h1>\r\n{{/section}}\r\n```\r\n\r\nThis will result the following code:\r\n```html\r\n<head>\r\n    <title>Hello express-handlebars-sections</title>\r\n</head>\r\n<body>\r\n    <h1>This is my Header Content</h1>\r\n    <p>This is my Body Content</p>\r\n    <h1>This is my Footer Content</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Note\r\nIt's not necessary define the content for a section. If no content is specified it does nothing.\r\n\r\n## Use Cases\r\n\r\n### Define a default content for the section\r\nWe can define a default content for the section in the layout. In this case if the view dosen't define a content for the section, its default content will be rendered.\r\n```html\r\n<head>\r\n    <title>Hello express-handlebars-sections</title>\r\n</head>\r\n<body>\r\n\r\n<!-- DEFINE THE DEFAULT CONTENT FOR THE 'header' SECTION -->\r\n{{#section 'header'}}\r\n    <p>Default Header</p>\r\n{{/section}}\r\n\r\n{{{_sections.header}}}\r\n\r\n...\r\n```\r\n\r\nIn this case if any content for the 'header' section is defined in the view, it will be render the default content. \r\n**Is necessary define the default content before define the section.**\r\nfor example the following code is incorrect\r\n```html\r\n{{{_sections.header}}}\r\n\r\n<!-- DEFINE THE DEFAULT CONTENT FOR THE 'header' SECTION -->\r\n{{#section 'header'}}\r\n    <p>Default Header</p>\r\n{{/section}}\r\n```\r\n\r\n### Require content for the section\r\nYou can force to require a content for a section, throwing an Error if no content is defined.\r\n```html\r\n<head>\r\n    <title>Hello express-handlebars-sections</title>\r\n</head>\r\n<body>\r\n\r\n<!-- DEFINE A REQUIRED 'header' SECTION -->\r\n{{{_sections._get 'header'}}}\r\n```\r\n\r\nIn this case if no content is defined for the 'header' section (either in view or layout) it will trhow the Error **\"The section 'header' is required.\"**.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cyberxander90/express-handlebars-sections.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.1"
}
